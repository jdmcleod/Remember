#day-popup-form data-testid='day-popup-form' class="#{local_assigns[:visible] ? '' : 'visibility-hidden'}" data-day-popup-target="container"
  .day-popup data-day-popup-target="popup"
    - if @entry.present?
      .flex.gap-sm.items-center
        button.day
          div = @entry.journalable.number

        div = "What I did on #{@entry.title}"

      .flex.gap-xs
        .flex.flex-col.items-center.gap-xxs.margin-top-xs
          - @day_badges.each do |badge|
            = button_to remove_badge_day_path(@day, badge), method: :delete, class: 'padding-inline-none' do
              = render 'shared/badge', locals: { badge: badge, size: 'x-small', type: 'deletable' }
          - @recommended_badges.each do |badge|
            = button_to add_badge_day_path(@day, badge), class: 'padding-inline-none' do
              = render 'shared/badge', locals: { badge: badge, size: 'x-small', type: 'addable' }
          - if @day_badges.count < 6
            - if @addable_badges.any?
              = render 'shared/context_menu', locals: { toggle: capture { render 'shared/badge', locals: { size: 'x-small', type: 'new' } } }
                .flex.items-center.gap-xs.flex-wrap
                  - @addable_badges.each do |badge|
                    = button_to add_badge_day_path(@day, badge), class: 'padding-inline-none' do
                      = render 'shared/badge', locals: { badge: badge, size: 'x-small', type: 'clickable' }
                  = modal_link_to new_badge_path, data: { turbo_stream: true } do
                    = render 'shared/badge', locals: { size: 'x-small', type: 'new' }
            - else
              = modal_link_to new_badge_path, data: { turbo_stream: true } do
                = render 'shared/badge', locals: { size: 'x-small', type: 'new' }

        .flex-grow-1
          = simple_form_for @entry, url: entry_path(@entry), data: { method: :put, turbo: true, 'day-popup-target': 'form' } do |f|
            = f.error_notification
            = f.error_notification message: f.object.errors[:base].to_sentence if f.object.errors[:base].present?

            = f.hidden_field :user_id, value: @entry.user_id

            = f.rich_text_area :content, data: { testid: 'short-entry-input' }

      / - if @memories.any?
      /   .flex.flex-wrap.gap-sm
      /     - @memories.each do |memory|
      /       rem-be-real-memory date=memory.day.date primarySrc=rails_storage_proxy_path(memory.primary) secondarySrc=rails_storage_proxy_path(memory.secondary)
      / - else
        p No Memories
